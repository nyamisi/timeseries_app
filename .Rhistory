fig1 = tz.data %>%
filter(site == "Mafia Channel") %>%
ggplot(aes(x = date, y = chlorophyll)) +
geom_line() +
theme(panel.background = element_rect(fill = NA, colour = "black"),
axis.text = element_text(size = 11, colour = "black"),
axis.title = element_text(size = 11, colour = "black")) +
labs(x = "", y = expression(Chlorophyll-a~(mgm^{-3})))
fig2 = tz.data %>%
filter(site == "Mafia Channel") %>%
ggplot(aes(x = as.factor(month(date, label = TRUE, abbr = TRUE)), y = chlorophyll)) +
geom_boxplot(fill = "green") +
theme(panel.background = element_rect(colour = "black", fill = NA),
axis.text = element_text(size = 11, colour = "black"),
axis.title = element_text(size = 11, colour = "black")) +
labs(x = "", y = expression(Chlorophyll-a~(mgm^{-3})))
patchwork::fig1 + fig2
patchwork::plot_layout(fig1, fig2, ncol = 2)  fig1 + fig2
patchwork::plot_layout(fig1, fig2, ncol = 2)
require(patchwork)
fig1 + fig2 + plot_layout(ncol = 2)
fig1 = tz.data %>%
filter(site == "Mafia Channel" & chlorophyll < 0.5) %>%
ggplot(aes(x = date, y = chlorophyll)) +
geom_line() +
theme(panel.background = element_rect(fill = NA, colour = "black"),
axis.text = element_text(size = 11, colour = "black"),
axis.title = element_text(size = 11, colour = "black")) +
labs(x = "", y = expression(Chlorophyll-a~(mgm^{-3})))
fig2 = tz.data %>%
filter(site == "Mafia Channel") %>%
ggplot(aes(x = as.factor(month(date, label = TRUE, abbr = TRUE)), y = chlorophyll)) +
geom_boxplot(fill = "green") +
theme(panel.background = element_rect(colour = "black", fill = NA),
axis.text = element_text(size = 11, colour = "black"),
axis.title = element_text(size = 11, colour = "black")) +
labs(x = "", y = expression(Chlorophyll-a~(mgm^{-3})))
fig1 + fig2 + plot_layout(ncol = 2)
fig2 = tz.data %>%
filter(site == "Mafia Channel" & chlorophyll < 0.5) %>%
ggplot(aes(x = as.factor(month(date, label = TRUE, abbr = TRUE)), y = chlorophyll)) +
geom_boxplot(fill = "green") +
theme(panel.background = element_rect(colour = "black", fill = NA),
axis.text = element_text(size = 11, colour = "black"),
axis.title = element_text(size = 11, colour = "black")) +
labs(x = "", y = expression(Chlorophyll-a~(mgm^{-3})))
fig1 + fig2 + plot_layout(ncol = 2)
fig1 / fig2 + plot_layout(ncol = 2)
fig1 / fig2 + plot_layout(ncol = 1)
fig1 / fig2 + plot_layout(ncol = 1, widths = 6, heights = 7)
tz.data %>%distinct(site)
site = tz.data %>%distinct(site) %>% pull
site
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
tz.data
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
tz.data
tz.data %>% pivot_longer(cols = tmax:chlorophyll, values_to = "data", names_to = "variable")
tz.data %>% pivot_longer(cols = tmax:sst, values_to = "data", names_to = "variable")
data = tz.data %>% pivot_longer(cols = tmax:sst, values_to = "data", names_to = "variable")
require(plotly)
data
data %>% filter(variable == "tmax")
data %>% filter(variable == "tmax") %>% plotly(x = ~date, y = ~data, split = ~site)
data %>% filter(variable == "tmax") %>% plot_ly(x = ~date, y = ~data, split = ~site)
data %>% filter(variable == "tmax") %>% plot_ly(x = ~date, y = ~data, split = ~site)+add_lines()
data %>% filter(variable == "tmax") %>% plot_ly(x = ~date, y = ~data, split = ~site) %>% add_lines()
data %>% filter(variable == "tmax") %>% plot_ly(x = ~date, y = ~data, split = ~site) %>% add_lines()
data %>% filter(variable == "tmax") %>% plot_ly(x = ~date, y = ~data, split = ~site) %>% add_lines() %>% config(locale = "sw")
data %>% filter(variable == "tmax") %>% plot_ly(x = date, y = ~data, split = ~site) %>% add_lines() %>% config(locale = "sw")
data %>% filter(variable == "tmax") %>% plot_ly(x = date, y = data, split = ~site) %>% add_lines() %>% config(locale = "sw")
data %>% filter(variable == "tmax") %>% plot_ly(x = ~date, y = ~data, split = ~site) %>% add_lines() %>% config(locale = "sw")
tz.data = read_csv("timeseries.csv")
tz.data
data = read_csv("timeseries.csv")
tz.data = data %>%
pivot_wider(names_from = variable, values_from = data)
data
require(tidyverse)
require(shiny)
require(shinythemes)
require(shinyWidgets)
require(DT)
require(lubridate)
require(plotly)
data = read_csv("timeseries.csv")
data
data %>%
plot_ly(x = ~date, y = ~data, split = ~site) %>%
add_boxplot()
data = read_csv("timeseries.csv") %>%
mutate(month = month(date, label = TRUE))
data %>%
plot_ly(x = ~month, y = ~data, split = ~site) %>%
add_boxplot()
data %>%
filter(variable == "tmax")%>%
plot_ly(x = ~month, y = ~data, split = ~site) %>%
add_boxplot()
data %>%
filter(variable == "tmax")%>%
plot_ly(x = ~date, y = ~data, split = ~site) %>%
add_line()
data %>%
filter(variable == "tmax")%>%
plot_ly(x = ~date, y = ~data, split = ~site) %>%
add_line()
data %>%
filter(variable == "tmax")%>%
plot_ly(x = ~date, y = ~data, split = ~site) %>%
add_lines()
data %>%
filter(variable == "tmax")%>%
ggplot(aes(x = month, y = data, fill = site)) +
geom_boxplot()
fig = data %>%
filter(variable == "tmax")%>%
ggplot(aes(x = month, y = data, fill = site)) +
geom_boxplot()
fig %>% ggplotly()
data %>%
filter(variable == "tmax")%>%
plot_ly(x = ~month, y = ~data, split = ~site) %>%
add_boxplot()
data %>%
filter(variable == "tmax")%>%
plot_ly(x = ~date, y = ~data, split = ~site) %>%
add_lines()
data %>% filter(variable == "tmax") %>% plot_ly(x = ~date, y = ~data, split = ~site) %>% add_lines() %>% config(locale = "sw")
data %>% distinct(site) %>% pull()
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
shiny::runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('climatology')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
data
require(plotly)
data = read_csv("timeseries.csv")
tz.data = data %>%
pivot_wider(names_from = variable, values_from = data)
data
data = read_csv("timeseries.csv") %>%
mutate(month = month(date))
data
data = read_csv("timeseries.csv") %>%
mutate(month = month(date),
season = replace(month, month == 5:10, "SE",
month, month == 11:12 | month == 1:4, "SE"))
data = read_csv("timeseries.csv") %>%
mutate(month = month(date),
season = replace(month, month == 5:10, "SE" | month, month == 11:12 | month == 1:4, "SE"))
data = read_csv("timeseries.csv") %>%
mutate(month = month(date),
season = replace(month, month == 5:10, "SE" | month, month == 11:12 & month == 1:4, "SE"))
data = read_csv("timeseries.csv") %>%
mutate(month = month(date),
season = replace(month, month == 5:10, "SE"))
data
data = read_csv("timeseries.csv") %>%
mutate(season = month(date)%>%as.integer())
data
data = read_csv("timeseries.csv") %>%
mutate(season = month(date)%>%as.integer()) %>%
mutate(season = replace(season, season %in% c(1:4, 11:12), "NE")) %>%
mutate(season = replace(season, season %in% c(5:9), "SE"))
data
data = read_csv("timeseries.csv") %>%
mutate(season = month(date)%>%as.integer()) %>%
mutate(season = replace(season, season %in% c(1:4, 11:12), "NE")) %>%
mutate(season = replace(season, season %in% c(5:10), "SE"))
data
data %>%
filter(variable == "chlorophyll") %>%
plot_ly(x = ~site, y = ~data, split = ~season) %>%
add_boxplot()
data %>%
filter(variable == "chlorophyll" & data < 0.5) %>%
plot_ly(x = ~site, y = ~data, split = ~season) %>%
add_boxplot()
data %>%
filter(variable == "chlorophyll" & data < 0.5) %>%
plot_ly(x = ~site, y = ~data, split = ~season) %>%
add_boxplot(pointpos = -1.8)
data %>%
filter(variable == "chlorophyll" & data < 0.5) %>%
plot_ly(x = ~site, y = ~data, split = ~season) %>%
add_boxplot(pointpos = -1.8, boxpoints = "all")
data %>%
filter(variable == "chlorophyll" & data < 0.5) %>%
plot_ly(x = ~site, y = ~data, split = ~season) %>%
add_boxplot(position = position_dodge())
data %>%
filter(variable == "chlorophyll" & data < 0.5) %>%
plot_ly(x = ~site, y = ~data, split = ~season) %>%
add_boxplot(position = position_dodge(2))
data %>%
filter(variable == "chlorophyll" & data < 0.5) %>%
plot_ly(x = ~site, y = ~data, split = ~season) %>%
add_boxplot()
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
data
runApp('tz_trend')
data %>%
filter(variable != "tmin")
data %>%
filter(variable != "tmin") %>% distinct(variable)
data %>%
filter(variable != "tmin") %>% distinct(variable) %>% pull
variable = data %>%
filter(variable != "tmin") %>% distinct(variable) %>% pull
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('climatology')
runApp('tz_trend')
variable
runApp('tz_trend')
runApp('climatology')
runApp('tz_trend')
input$season_tz
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
shiny::runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name = "nyamisi",token = "5E179BDEFDD21FE3C58C677013E37331",secret = "dani2603")
rsconnect::setAccountInfo(name = "nyamisi",token = "5E179BDEFDD21FE3C58C677013E37331",secret = "dani2603")
rsconnect::setAccountInfo(name = "nyamisi",token = "5E179BDEFDD21FE3C58C677013E37331",secret = "xLaHGPBxZPhj3vv3e2MgeoBmz3PJN4s0aADJyVrM")
shiny::runApp('tz_trend')
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
#load packages
require(tidyverse)
cr = read_csv('D:/Users/Masumbuko.Semba/Documents/Michi/phD/UDSM/Data Manipulation/crtr/crtr.csv')
cr
cr = as_tibble(cr)
class(cr)
glimpse(cr)
cr = cr%>%mutate(date = seq(dmy(200308),dmy(150309),30))
require(lubridate)
#load packages
require(tidyverse)
require(raster) # geographical data analysis and modeling
require(rgdal) # bingings for the geospatil data
require(broom) # convert statistical analyss objects into Tidy Dat Frames
require(RColorBrewer) # color brewer palletes
require(rgeos) # interface t geometry engine-open source
require(maptools) # tools for reading and handling spatial objects
require(mapdata) # map datatabase
require(ggsn) # to add north arrow and a scale bar to the map
require(tidyr)
require(dplyr)
require(lubridate)
require(factoextra)
require(knitr)
require(EnvStats)
require(gridExtra)
require(grid)
require(car)
require(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("print", "EnvStats")
conflict_prefer("filter", "dplyr")
cr = cr%>%mutate(date = seq(dmy(200308),dmy(150309),30))
cr = cr%>%mutate(Year = year(date), Month = month(date))
glimpse(cr)
salinity = cr%>%select(18:20, 2:5)
temperature = cr%>%select(18:20, 6:9)
temperature = temperature%>%
rename(Pongwe = Pongwe.1,
Mnemba = Mnemba.1,
Chumbe = Chumbe.1,
Bawe = Bawe.1 )
### 1. Environmental Variables
cr = read.csv('D:/Users/Masumbuko.Semba/Documents/Michi/phD/UDSM/Data Manipulation/crtr/crtr.csv')
cr
cr = as_tibble(cr)
class(cr)
glimpse(cr)
cr = cr%>%mutate(date = seq(dmy(200308),dmy(150309),30))
cr = cr%>%mutate(Year = year(date), Month = month(date))
glimpse(cr)
salinity = cr%>%select(18:20, 2:5)
temperature = cr%>%select(18:20, 6:9)
temperature = temperature%>%
rename(Pongwe = Pongwe.1,
Mnemba = Mnemba.1,
Chumbe = Chumbe.1,
Bawe = Bawe.1 )
do = cr%>%select(18:20, 10:13)
do = do%>%rename(Pongwe = Pongwe.2,
Mnemba = Mnemba.2,
Chumbe = Chumbe.2,
Bawe = Bawe.2 )
ph = cr%>%select(18:20, 14:17)
ph = ph%>%rename(Pongwe = Pongwe.3,
Mnemba = Mnemba.3,
Chumbe = Chumbe.3,
Bawe = Bawe.3 )
### Gather
head(salinity)
salinity = salinity%>%
gather(site, values, 4:7)%>%
mutate(variable = 'Salinity')
temperature = temperature%>%
gather(site, values, 4:7)%>%
mutate(variable = 'temperature')
do = do%>%
gather(site, values, 4:7)%>%
mutate(variable = 'do')
ph = ph%>%
gather(site, values, 4:7)%>%
mutate(variable = 'pH')
### stitching
crtr.long = bind_rows(salinity, temperature, do, ph)
### spread
crtr.wide = crtr.long%>%spread(variable, values)
rm(cr, crtr.long, do, ph, salinity, temperature)
### 2. Nutrient and chlorophyll data
nut = read.csv('D:/Users/Masumbuko.Semba/Documents/Michi/phD/UDSM/Data Manipulation/crtr/Crtr.nutrients.csv')
nut = as_tibble(nut)
glimpse(nut)
nut = nut%>%mutate(date = seq(dmy(200308),
dmy(150309),
30))
nut = nut%>%rename(Date = Month)
nut = nut%>%mutate(Year = year(date),
Month = month(date))
chlorophyll = nut%>%select(18:20, 2:5)%>%
mutate(variable = 'Chlrophyll')
ammonia = nut%>%select(18:20, 6:9)
ammonia = ammonia%>%
rename(Pongwe = Pongwe.1,
Mnemba = Mnemba.1,
Chumbe = Chumbe.1,
Bawe = Bawe.1)%>%
mutate(variable = 'Ammonia')
phosphate = nut%>%select(18:20, 10:13)
phosphate = phosphate%>%
rename(Pongwe = Pongwe.2,
Mnemba = Mnemba.2,
Chumbe = Chumbe.2,
Bawe = Bawe.2 )%>%
mutate(variable = 'Phosphate')
nitrate = nut%>%select(18:20, 14:17)
nitrate = nitrate%>%
rename(Pongwe = Pongwe.3,
Mnemba = Mnemba.3,
Chumbe = Chumbe.3,
Bawe = Bawe.3 )%>%
mutate(variable = 'Nitrate')
nitrate = nitrate%>%
gather(site, values, 4:7)
phosphate = phosphate%>%
gather(site, values, 4:7)
ammonia = ammonia%>%
gather(site, values, 4:7)
chlorophyll = chlorophyll%>%
gather(site, values, 4:7)
nut.wide = nut.long%>%
spread(variable, values)
nut.long = bind_rows(chlorophyll,
ammonia,
phosphate,
nitrate)
names(nut.long)
nut.wide = nut.long%>%
spread(variable, values)
crtr.data =crtr.wide%>%
full_join(nut.wide, by = c('site' = 'site',
'date' = 'date',
'Year' = 'Year',
'Month' = 'Month'))
remove(ammonia, chlorophyll, nitrate, nut, nut.long, phosphate, crtr.long, crtr.wide)
month.freq = crtr.data%>%
select(Month)%>%
group_by(Month)%>%
summarise(Frequency = n())
month.freq
crtr.data = crtr.data%>%
mutate(Seasons = cut(Month, c(0,3.9,4.9,9.9,10.9,12),
labels = c("NE.1", "IN.1", "SE.1", "IN.2", "NE.2")))
crtr.data = crtr.data%>%
separate(Seasons, c('Seasons', 'code'))
crtr.data =  crtr.data%>%
select(-code)
data
require(tidyverse)
require(shiny)
require(shinythemes)
require(shinyWidgets)
require(DT)
require(lubridate)
require(patchwork)
require(plotly)
data = read_csv("timeseries.csv") %>%
mutate(season = month(date)%>%as.integer()) %>%
mutate(season = replace(season, season %in% c(1:4, 11:12), "NE")) %>%
mutate(season = replace(season, season %in% c(5:10), "SE"))
tz.data = data %>%
pivot_wider(names_from = variable, values_from = data)
data
data = read_csv("timeseries.csv") %>%
mutate(season = month(date)%>%as.integer()) %>%
mutate(season = replace(season, season %in% c(1:4, 11:12), "NE")) %>%
mutate(season = replace(season, season %in% c(5:10), "SE")) %>%
mutate(month = month(date, label = TRUE, abbr = TRUE))
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('tz_trend')
runApp('climatology')
runApp('tz_trend')
data %>%
filter(site == "Lindi" & variable == "chlorophyll") %>%
plot_ly(x = ~date, y = ~variable) %>%
add_lines()
data %>%
filter(site == "Lindi" & variable == "chlorophyll") %>%
plot_ly(x = ~date, y = ~variable) %>%
add_paths()
runApp('tz_trend')
install.packages("shiny")
install.packages("shinythemes")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("patchwork")
install.packages("DT")
install.packages("shinyWidgets")
require(tidyverse)
require(shiny)
require(shinythemes)
require(shinyWidgets)
require(lubridate)
require(DT)
require(patchwork)
require(plotly)
shiny::runApp('tz_trend')
install.packages(c("backports", "BayesFactor", "BH", "blob", "blogdown", "bookdown", "brew", "brio", "broom", "cachem", "car", "carData", "changepoint", "cli", "clipr", "colorspace", "commonmark", "conflicted", "conquer", "correlation", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "crul", "curl", "data.table", "datawizard", "DBI", "dendextend", "desc", "deSolve", "devtools", "dials", "diffobj", "digest", "doParallel", "dplyr", "dtplyr", "e1071", "effectsize", "EnvStats", "evaluate", "fansi", "ff", "fields", "filehash", "flextable", "foreach", "forecast", "formatR", "fs", "furrr", "future", "GA", "gam", "gargle", "gdtools", "generics", "geojsonsf", "geosphere", "gert", "ggpmisc", "ggpp", "ggstatsplot", "glue", "gmp", "googledrive", "googlesheets4", "gower", "graphlayouts", "gsw", "gt", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "knitr", "later", "lava", "LBSPR", "leaflet", "lhs", "lifecycle", "lme4", "lmtest", "loo", "lwgeom", "magrittr", "manipulateWidget", "mapproj", "maps", "maptools", "marmap", "matrixStats", "memoise", "metR", "mgcv", "mime", "modeltime", "moonBook", "msm", "mvtnorm", "ncdf4", "nloptr", "oce", "ocedata", "officer", "openair", "openssl", "openxlsx", "parallelly", "parameters", "parsnip", "parzer", "pbapply", "pdftools", "performance", "pillar", "pkgbuild", "pkgload", "plotrix", "plyr", "PMCMRplus", "pracma", "prismatic", "pROC", "processx", "psych", "qgam", "quantreg", "R6", "raster", "RcppArmadillo", "RcppParallel", "RCurl", "readr", "readxl", "recipes", "remotes", "report", "repr", "reprex", "rerddap", "rgdal", "rgeos", "rgl", "rio", "rJava", "rjson", "rlang", "rmarkdown", "Rmpfr", "rsample", "RSQLite", "rstan", "Rttf2pt1", "rvest", "sass", "satellite", "servr", "sessioninfo", "sf", "shinyjs", "shinyWidgets", "sjmisc", "slam", "slider", "sp", "spam", "spData", "stars", "statsExpressions", "stringi", "SuppDists", "svglite", "systemfonts", "terra", "testthat", "tibble", "tidymodels", "tidymv", "tidyr", "tidyselect", "timetk", "tinytex", "tmap", "tmvtnorm", "TropFishR", "tseries", "TTR", "tune", "tzdb", "units", "usethis", "utf8", "uuid", "V8", "vcd", "vctrs", "viridis", "vroom", "waldo", "withr", "wk", "workflows", "workflowsets", "xfun", "xgboost", "XML", "xml2", "yaml", "yardstick", "ztable"))
install.packages(c("backports", "BayesFactor", "BH", "blob", "blogdown", "bookdown", "brew", "brio", "broom", "cachem", "car", "carData", "changepoint", "cli", "clipr", "colorspace", "commonmark", "conflicted", "conquer", "correlation", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "crul", "curl", "data.table", "datawizard", "DBI", "dendextend", "desc", "deSolve", "devtools", "dials", "diffobj", "digest", "doParallel", "dplyr", "dtplyr", "e1071", "effectsize", "EnvStats", "evaluate", "fansi", "ff", "fields", "filehash", "flextable", "foreach", "forecast", "formatR", "fs", "furrr", "future", "GA", "gam", "gargle", "gdtools", "generics", "geojsonsf", "geosphere", "gert", "ggpmisc", "ggpp", "ggstatsplot", "glue", "gmp", "googledrive", "googlesheets4", "gower", "graphlayouts", "gsw", "gt", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "iterators", "jpeg", "jsonlite", "knitr", "later", "lava", "LBSPR", "leaflet", "lhs", "lifecycle", "lme4", "lmtest", "loo", "lwgeom", "magrittr", "manipulateWidget", "mapproj", "maps", "maptools", "marmap", "matrixStats", "memoise", "metR", "mgcv", "mime", "modeltime", "moonBook", "msm", "mvtnorm", "ncdf4", "nloptr", "oce", "ocedata", "officer", "openair", "openssl", "openxlsx", "parallelly", "parameters", "parsnip", "parzer", "pbapply", "pdftools", "performance", "pillar", "pkgbuild", "pkgload", "plotrix", "plyr", "PMCMRplus", "pracma", "prismatic", "pROC", "processx", "psych", "qgam", "quantreg", "R6", "raster", "RcppArmadillo", "RcppParallel", "RCurl", "readr", "readxl", "recipes", "remotes", "report", "repr", "reprex", "rerddap", "rgdal", "rgeos", "rgl", "rio", "rJava", "rjson", "rlang", "rmarkdown", "Rmpfr", "rsample", "RSQLite", "rstan", "Rttf2pt1", "rvest", "sass", "satellite", "servr", "sessioninfo", "sf", "shinyjs", "shinyWidgets", "sjmisc", "slam", "slider", "sp", "spam", "spData", "stars", "statsExpressions", "stringi", "SuppDists", "svglite", "systemfonts", "terra", "testthat", "tibble", "tidymodels", "tidymv", "tidyr", "tidyselect", "timetk", "tinytex", "tmap", "tmvtnorm", "TropFishR", "tseries", "TTR", "tune", "tzdb", "units", "usethis", "utf8", "uuid", "V8", "vcd", "vctrs", "viridis", "vroom", "waldo", "withr", "wk", "workflows", "workflowsets", "xfun", "xgboost", "XML", "xml2", "yaml", "yardstick", "ztable"))
install.packages(c("backports", "cachem", "cli", "colorspace", "data.table", "digest", "dplyr", "fansi", "fs", "glue", "haven", "httpuv", "igraph", "jsonlite", "later", "LBSPR", "magrittr", "mime", "prismatic", "readr", "readxl", "rlang", "sass", "shinyjs", "stringi", "tibble", "tidyr", "tzdb", "utf8", "vctrs", "vroom", "xfun", "xml2", "yaml"))
shiny::runApp('tz_trend')
runApp('tz_trend')
shiny::runApp('tz_trend')
version("rstudio")
shiny::runApp('tz_trend')
shiny::runApp('tz_trend')
runApp('climatology')
shiny::runApp('climatology')
runApp('tz_trend')
